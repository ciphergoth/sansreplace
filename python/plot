#!/usr/bin/env python3

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import pathlib

import read_results

topdir = pathlib.Path(__file__).resolve().parent.parent

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False,
        description="Plot one algorithm against many others")
    p.add_argument('csv', type=pathlib.Path)
    p.add_argument("--algorithm",  action='append')
    p.add_argument('--compare-to', default="cardchoose")
    p.add_argument('--to-png', action='store_true')
    p.add_argument('--output-dir', type=pathlib.Path)
    return p.parse_args()

def main():
    args = parse_args()
    if args.output_dir is None:
        args.output_dir = args.csv.parent
    data = {}
    for item in read_results.read(args.csv):
        data.setdefault(item.alg, []).append(item)
    if args.to_png:
        import matplotlib
        matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    if args.algorithm is None:
        args.algorithm = sorted(a for a in data.keys() if a != args.compare_to)
    for alt in args.algorithm:
        fig = plt.figure()
        ax = plt.gca()
        ax.set_xscale('log')
        ax.set_yscale('log')
        ax.set_xlabel("k")
        ax.set_ylabel("time/k (s)")
        for alg, color in [[args.compare_to, 'b-'], [alt, 'r-']]:
            points = {}
            for t in data[alg]:
                if t.k > 0:
                    points.setdefault(t.n, []).append((t.k, t.time/t.k))
            line = None
            for l in points.values():
                l.sort()
                if l[-1][0] > 0:
                    line, = ax.plot([p[0] for p in l], [p[1] for p in l], color)
            line.set_label(alg)
        ax.legend()
        if args.to_png:
            plt.savefig(str(args.output_dir / f"{args.compare_to}_{alg}"))
        else:
            plt.show()

if __name__ == '__main__':
    main()
