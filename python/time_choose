#!/usr/bin/env python3

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import gc
import importlib
import time

def time_test(choose, n, k, iters):
    gc.disable()
    start = time.process_time()
    for _ in range(iters):
        choose(n, k)
    finish = time.process_time()
    gc.enable()
    return finish - start

def test_choose(args, name, choose, n, k):
    initruns = 1
    while True:
        inittime = time_test(choose, n, k, initruns)
        if inittime * 10 >= args.test_time:
            num_tests = max(1, int(args.test_time * initruns / inittime))
            break
        initruns *= 10
    res = time_test(choose, n, k, num_tests) / num_tests
    print(f"    {res:10.3g}s {name}")
    return res

def parse_args():
    p = argparse.ArgumentParser()
    p.add_argument('--test-time', type=int, default=1.0)
    p.add_argument('--method', default='sorted_choose')
    p.add_argument('--module', action='append')
    return p.parse_args()

def main():
    args = parse_args()
    modules = args.module
    if modules is None:
        # iterativechoose is always terrible, leave it out
        modules = ['cardchoose', 'fisheryates', 'floydf2',
            'rejectionsample', 'selby_fy']
    modules = [(m, getattr(importlib.import_module(f"algorithms.{m}"), args.method))
        for m in modules]
    for np in range(1,7):
        n = 10**np
        for kp in range(0, np):
            k = 10**kp
            print(f"{n:7} choose {k:7}")
            l = []
            for name, choose in modules:
                t = test_choose(args, name, choose, n, k)
                l.append((t, name))
            l.sort()
            threshhold = l[0][0] * 1.5
            winners = [e[1] for e in l if e[0] <= threshhold]
            print(f"{n:7} choose {k:7} winners: {', '.join(winners)}")
            print()
if __name__ == '__main__':
    main()
