#!/usr/bin/env python3

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import csv
import subprocess
import pathlib

import cffi

import impl_load

topdir = pathlib.Path(__file__).resolve().parent.parent

def timefunc_for(time, params, timeable):
    iters = 1
    remaining = time
    while True:
        t = timeable.time(params, iters)
        #print(f"{func}({n}, {k}) * {iters} = {t}")
        remaining -= t
        if t >= remaining:
            return t / iters
        elif t * 100 > remaining:
            iters = int(iters * remaining / t)
        elif t * 10000 > remaining:
            iters = int(iters * remaining * 0.1 / t)
        else:
            iters *= 10

def run_timings(args, vitr, totime):
    klim = {}
    done = set()
    for descrip, n, k in vitr:
        if (n, k) in done:
            print(f"skipping {descrip}, already done")
            continue
        print(f"{descrip}")
        done.add((n, k))
        res = []
        for name, tm in totime.items():
            if name not in klim or k < klim[name]:
                t = timefunc_for(args.time_for, (n, k), tm)
                if args.csv is not None:
                    with args.csv.open("a") as csvf:
                        writer = csv.writer(csvf)
                        writer.writerow(['result', name, n, k, t])
                res.append((t, name))
                if t > args.time_for:
                    print(f"hit tlim: {name}")
                    klim[name] = k
        if len(res) == 0:
            print()
            continue
        res.sort()
        if res[0][0] < 1E-6:
            unit = "ns"; mul = 1E9
        elif res[0][0] < 1E-3:
            unit = "Î¼s"; mul = 1E6
        elif res[0][0] < 1:
            unit = "ms"; mul = 1E3
        else:
            unit = "s"; mul = 1
        for t, name in res:
            print(f"{t*mul:12.1f}{unit} {name:20}")
        print()

def small_values():
    top = 11
    for n in range(top):
        for k in range(n+1):
            yield f"n = {n}, k = {k}", n, k

def power10_values():
    ptop = 9
    klim = {}
    for pn in range(ptop):
        for pk in range(pn + 1):
            yield f"n = 10^{pn}, k = 10^{pk}", 10**pn, 10**pk

def power2_values():
    ptop = 30
    klim = {}
    for pn in range(ptop):
        for pk in range(pn + 1):
            yield f"n = 2^{pn}, k = 2^{pk}", 2**pn, 2**pk

def fib(m):
    a, b = 0, 1
    while a < m:
        yield a
        a, b = b, a + b

def fib_values():
    ptop = 1E9
    klim = {}
    for pn, n in enumerate(fib(ptop)):
        for pk, k in enumerate(fib(n + 1)):
            yield f"n = F_{pn} = {n}, k = F_{pk} = {k}", n, k

def get_gitstate():
    rp = subprocess.run(["git", "rev-parse", "HEAD"], cwd=topdir, check=True,
        stdout=subprocess.PIPE, errors='strict')
    gitstate = rp.stdout.strip()
    di = subprocess.run(["git", "diff-index", "--quiet", "HEAD", "--"],
        cwd=topdir)
    if di.returncode != 0:
        gitstate += "+"
    return gitstate

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False,
        description="Time multiple algorithms against multiple n,k values")
    p.add_argument("--time-for", type=float, default=0.1)
    p.add_argument("--algorithm",  action='append')
    p.add_argument("--sorttype", default="sorted", choices=['sorted', 'random'],
        help="Algorithm variant to test")
    p.add_argument("--values", action='append')
    p.add_argument("--csv", type=pathlib.Path)
    impl_load.add_arguments(p)
    return p.parse_args()

def main():
    args = parse_args()
    if args.values is None:
        args.values = ["small", "power10"]
    if args.csv is not None:
        args.csv.parent.mkdir(parents=True, exist_ok=True)
        with args.csv.open("w") as csvf:
            writer = csv.writer(csvf)
            writer.writerow(['config', 'version', get_gitstate()])
            for k, v in sorted(vars(args).items()):
                writer.writerow(['config', k, v])
    timeables = impl_load.get_timeables(args, topdir)
    t = timefunc_for(args.time_for, (0, 0), timeables["donothing"]["donothing"])
    print(f"donothing: {t*1E9:7.1f}ns")
    values = [tup for v in args.values
        for tup in globals()[f"{v}_values"]()]
    if args.algorithm is None:
        totime = timeables[args.sorttype]
    else:
        totime = {k:timeables[args.sorttype][k] for k in args.algorithm}
    run_timings(args, values, totime)

if __name__ == '__main__':
    main()
