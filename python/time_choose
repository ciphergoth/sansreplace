#!/usr/bin/env python3

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import atexit
import csv
import pathlib

import gitstate
import impl_load
import nkvalues

topdir = pathlib.Path(__file__).resolve().parent.parent

def fix_freq():
    governors = []
    def reset():
        for p, v in governors:
            p.write_bytes(v)
    atexit.register(reset)
    cpufreq = pathlib.Path('/sys/devices/system/cpu/cpufreq')
    for child in cpufreq.iterdir():
        if not child.name.startswith("policy"):
            continue
        sg = child / "scaling_governor"
        old = sg.read_bytes()
        governors.append((sg, old))
        sg.write_bytes(b"performance")

def timefunc_for(time, params, timeable):
    iters = 1
    remaining = time
    while True:
        t = timeable.time(params, iters)
        #print(f"{func}({n}, {k}) * {iters} = {t}")
        remaining -= t
        if t >= remaining:
            return t / iters
        elif t * 100 > remaining:
            iters = int(iters * remaining / t)
        elif t * 10000 > remaining:
            iters = int(iters * remaining * 0.1 / t)
        else:
            iters *= 10

def run_timings(args, vitr, totime):
    klim = {}
    done = set()
    for descrip, n, k in vitr:
        print(f"{descrip}")
        done.add((n, k))
        res = []
        for tm in totime:
            if tm.alg not in klim or k < klim[tm.alg]:
                t = timefunc_for(args.time_for, (n, k), tm)
                if args.csv is not None:
                    with args.csv.open("a") as csvf:
                        writer = csv.writer(csvf)
                        writer.writerow(['result', tm.alg, n, k, t])
                res.append((t, tm.alg))
                if t > args.time_limit:
                    print(f"hit tlim: {tm.alg}")
                    klim[tm.alg] = k
        if len(res) == 0:
            print()
            continue
        res.sort()
        if res[0][0] < 1E-6:
            unit = "ns"; mul = 1E9
        elif res[0][0] < 1E-3:
            unit = "Î¼s"; mul = 1E6
        elif res[0][0] < 1:
            unit = "ms"; mul = 1E3
        else:
            unit = "s"; mul = 1
        for t, alg in res:
            print(f"{t*mul:12.1f}{unit} {alg:20}")
        print()

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False,
        description="Time multiple algorithms against multiple n,k values")
    p.add_argument("--time-for", type=float, default=0.1,
        help="Maximum time to iterate a given test")
    p.add_argument("--time-limit", type=float, default=0.1,
        help="Maximum time a single test can run")
    p.add_argument("--algorithm",  action='append')
    p.add_argument("--sorttype", default="random", choices=['sorted', 'random'],
        help="Algorithm variant to test")
    p.add_argument("--values", action='append')
    p.add_argument("--fix-freq", action='store_true')
    p.add_argument("--csv", type=pathlib.Path)
    impl_load.add_arguments(p)
    return p.parse_args()

def main():
    args = parse_args()
    if args.fix_freq:
        fix_freq()
    if args.values is None:
        args.values = ["small", "power10"]
    timeables = impl_load.get_timeables(args, topdir)
    if args.algorithm is None:
        totime = list(timeables[args.sorttype].values())
    else:
        totime = [timeables[args.sorttype][k] for k in args.algorithm]
    if args.csv is not None:
        args.csv.parent.mkdir(parents=True, exist_ok=True)
        with args.csv.open("w") as csvf:
            writer = csv.writer(csvf)
            for k, v in sorted(vars(args).items()):
                writer.writerow(['config', k, v])
            info = {
                'version': gitstate.get(topdir),
                'donothing_s': timefunc_for(args.time_for, (0, 0),
                    timeables["donothing"]["donothing"]),
                'algorithms': list(t.alg for t in totime),
            }
            for k, v in info.items():
                writer.writerow(['info', k, v])
    run_timings(args, nkvalues.iter_values(args.values), totime)

if __name__ == '__main__':
    main()
