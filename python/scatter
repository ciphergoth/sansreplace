#!/usr/bin/env python3

# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import pathlib

import read_results

topdir = pathlib.Path(__file__).resolve().parent.parent

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False,
        description="Scattergram of which algorithms are fastest for which values")
    p.add_argument('csv', type=pathlib.Path)
    p.add_argument('--png-output', type=pathlib.Path)
    return p.parse_args()

def main():
    args = parse_args()
    if args.png_output is not None:
        import matplotlib
        matplotlib.use('Agg')
        args.png_output.parent.mkdir(parents=True, exist_ok=True)
    import matplotlib.pyplot as plt
    data = {}
    for item in read_results.read(args.csv):
        data.setdefault((item.n, item.k), []).append(item)
    points = {}
    markermap = {
        'reservoirsample': 'D',
        'floydf2': 'X',
    }
    for l in data.values():
        winner = min((it for it in l if it.alg in markermap), default=None, key=lambda it: it.time)
        if winner is None:
            continue
        points.setdefault(winner.alg, []).append(winner)
    fig = plt.figure()
    ax = plt.gca()
    ax.set_xscale('log')
    ax.set_yscale('log')
    for k, l in points.items():
        plt.scatter([it.n for it in l], [it.k for it in l], marker=markermap[k])
    if args.png_output is not None:
        plt.savefig(str(args.png_output))
    else:
        plt.show()

if __name__ == '__main__':
    main()
