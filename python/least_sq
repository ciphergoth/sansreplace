#!/usr/bin/env python3

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import math
import pathlib

import numpy as np

import plot_anim
import read_results

topdir = pathlib.Path(__file__).resolve().parent.parent

def parse_args():
    p = argparse.ArgumentParser(allow_abbrev=False,
        description="Model performance using least squares")
    p.add_argument('csv', type=pathlib.Path)
    p.add_argument('algorithm')
    p.add_argument('--model', action='append')
    p.add_argument('--output')
    return p.parse_args()

def main():
    args = parse_args()
    items = []
    for item in read_results.read(args.csv):
        if item.alg == args.algorithm:
            items.append(item)
    gooditems = [item for item in items if item.k >= 10 and item.k != item.n]
    t = np.fromiter((item.time for item in gooditems), dtype=np.float64)
    n = np.fromiter((item.n for item in gooditems), dtype=np.float64)
    k = np.fromiter((item.k for item in gooditems), dtype=np.float64)
    ones = np.ones(len(gooditems))
    if args.model is None:
        args.model = ['n', 'k', 'k2', 'klogk']
    args.model.insert(0, '1')
    vstack = []
    funcs = []
    for m in args.model:
        if m == '1':
            vstack.append(ones)
            funcs.append(lambda item: 1)
        elif m == 'n':
            vstack.append(n)
            funcs.append(lambda item: item.n)
        elif m == 'k':
            vstack.append(k)
            funcs.append(lambda item: item.k)
        elif m == 'k2':
            vstack.append(np.square(k))
            funcs.append(lambda item: item.k ** 2)
        elif m == 'klogk':
            vstack.append(np.multiply(k, np.log(k)))            
            funcs.append(lambda item: item.k * math.log(item.k))
        else:
            raise Exception(f"Unknown method: {m}")
    a = np.vstack(vstack)
    trecip = np.reciprocal(t)
    a = np.multiply(a, np.tile(trecip, (len(vstack), 1)))
    #print(a.T)
    #print(t)
    x, residuals, rank, singvals = np.linalg.lstsq(a.T, ones, rcond=-1)
    print(x)
    print(math.sqrt(residuals[0]/len(gooditems)))
    plotdata = {}
    for item in items:
        if item.k == 0:
            continue
        nrow = plotdata.setdefault(item.n, {'predicted': [], 'actual': []})
        prediction = sum(c * f(item) for (c, f) in zip(x, funcs))
        nrow['actual'].append((item.k, 1E9 * item.time/item.k))
        nrow['predicted'].append((item.k, 1E9 * prediction/item.k))
    for nv in plotdata.values():
        for v in nv.values():
            v.sort()
    plotdata = list(plotdata.items())
    plotdata.sort()
    plot_anim.plot(["predicted", "actual"], plotdata, args.algorithm, args.output)

if __name__ == '__main__':
    main()
