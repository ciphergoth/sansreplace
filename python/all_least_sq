#!/usr/bin/env python3

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import argparse
import math
import pathlib

import numpy as np

import lstsq
import pclasses
import plot_anim
import read_results

topdir = pathlib.Path(__file__).resolve().parent.parent

def read_data(csv, algorithm):
    items = []
    for item in read_results.read(csv):
        if item.alg == algorithm:
            items.append(item)
    return items

def write_table(outfile, csv, pairs):
    items = list(read_results.read(csv))
    with outfile.open("w") as out:
        for title, name, models in pairs:
            models = models + [pclasses.One()]
            fit = lstsq.gen_fit([item for item in items if item.alg == name], models)
            z = " + ".join(m.tex(c) for m, c in zip(models, fit))
            z = z.replace("+ -", "- ")
            out.write(f"{title} & \\({z}\\)\\\\\n")

def main():
    results = topdir / "results/latest"
    latex = topdir / "latex"
    write_table(latex / "random_table.tex", results / "random.csv", 
        [
            ("Quadratic F2", "quadraticf2", [pclasses.K2(), pclasses.K()]),
            ("Our algorithm", "cardchoose", [pclasses.KLogK(), pclasses.K()]),
            ("SELECT", "select", [pclasses.N(), pclasses.K()]),
            ("Reservoir sampling", "reservoirsample", [pclasses.N(), pclasses.K()]),
        ])
    write_table(latex / "sorted_table.tex", results / "sorted.csv", 
        [
            ("Our algorithm", "cardchoose", [pclasses.KLogK(), pclasses.K()]),
            ("Iterative choosing", "iterativechoose", [pclasses.N(), pclasses.K()]),
        ])


if __name__ == '__main__':
    main()
